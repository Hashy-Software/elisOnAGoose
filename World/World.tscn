[gd_scene load_steps=26 format=2]

[ext_resource path="res://World/Background.tres" type="TileSet" id=1]
[ext_resource path="res://Objects/DeathTrigger/DeathTrigger.tscn" type="PackedScene" id=2]
[ext_resource path="res://Objects/Coin/Coin.tscn" type="PackedScene" id=3]
[ext_resource path="res://Player/Player.tscn" type="PackedScene" id=4]
[ext_resource path="res://UI/CoinCounter/CoinCounter.tscn" type="PackedScene" id=5]
[ext_resource path="res://World/gas.mp3" type="AudioStream" id=6]
[ext_resource path="res://World/parallax_bg.png" type="Texture" id=7]
[ext_resource path="res://World/Foreground.tres" type="TileSet" id=8]
[ext_resource path="res://Objects/Cactus/Cactus.tscn" type="PackedScene" id=9]
[ext_resource path="res://UI/Transition/Transition.tscn" type="PackedScene" id=10]
[ext_resource path="res://World/World.gd" type="Script" id=11]
[ext_resource path="res://Objects/dino.png" type="Texture" id=12]
[ext_resource path="res://Objects/single_dino.png" type="Texture" id=13]
[ext_resource path="res://Objects/Burger/Burger.tscn" type="PackedScene" id=14]

[sub_resource type="RectangleShape2D" id=16]
extents = Vector2( 23, 215 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 12 )
region = Rect2( 0, 0, 88, 95 )

[sub_resource type="AtlasTexture" id=20]
atlas = ExtResource( 12 )
region = Rect2( 176, 0, 88, 95 )

[sub_resource type="AtlasTexture" id=21]
atlas = ExtResource( 12 )
region = Rect2( 264, 0, 88, 95 )

[sub_resource type="SpriteFrames" id=22]
animations = [ {
"frames": [ SubResource( 19 ), SubResource( 20 ), SubResource( 19 ), SubResource( 21 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Shader" id=23]
code = "shader_type canvas_item;

uniform sampler2D noise_tex_normal;
uniform sampler2D noise_tex;
uniform float progress : hint_range(0.0, 1.0);
uniform float strength = 1.0;

// If your sprite doesn't have enough space and the explosion gets clipped, 
// you can uncomment this and adjust the scale
//void vertex() {
//	float scale = 3.0;
//	VERTEX *= scale;
//
//	UV *= scale;
//	UV -= (scale - 1.0) / 2.0;
//}

void fragment() {
	vec2 direction = texture(noise_tex_normal, UV).xy; // We're using normal map as direction
	direction -= 0.5; // Since our normal map is a texture, it ranges from 0.0 to 1.0...
	direction *= 2.0; // ...so we're going to make it range from -1.0 to 1.0.
	direction = direction * strength * progress;
	
	// UV for exploded texture
	vec2 tex_size = 1.0 / TEXTURE_PIXEL_SIZE; // Real texture size in pixels
	vec2 uv = floor(UV * tex_size) / (tex_size - 1.0); // Pixelate UV to snap pixels
	uv = uv - direction; // Distort UV
	
	// Texture with exploded UV
	vec4 tex = texture(TEXTURE, uv); 
	
	// Dissolve alpha
	float dissolve = texture(noise_tex, UV).x;
	dissolve = step(progress, dissolve);
	tex.a *= dissolve;
	
	// Border (in case the edge of your sprite stretches, otherwise you can remove this block)
	vec2 border_uv = uv * 2.0 - 1.0;
	border_uv = clamp(abs(border_uv), 0.0, 1.0);
	float border = max(border_uv.x, border_uv.y);
	border = ceil(1.0 - border);
	tex.a *= border;
	
	COLOR = tex;
}"

[sub_resource type="OpenSimplexNoise" id=25]
period = 0.1

[sub_resource type="NoiseTexture" id=26]
flags = 2
width = 88
height = 94
noise = SubResource( 25 )

[sub_resource type="OpenSimplexNoise" id=27]
seed = 7
period = 0.1

[sub_resource type="NoiseTexture" id=28]
flags = 2
width = 88
height = 94
as_normalmap = true
noise = SubResource( 27 )

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )
shader_param/progress = 0.0
shader_param/strength = 1.0
shader_param/noise_tex_normal = SubResource( 28 )
shader_param/noise_tex = SubResource( 26 )

[node name="World" type="Node2D"]
script = ExtResource( 11 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ColorRect" type="ColorRect" parent="ParallaxBackground"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.12549, 0.129412, 0.141176, 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.1, 0.1 )
motion_offset = Vector2( 0, -100 )
motion_mirroring = Vector2( 2500, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
texture = ExtResource( 7 )
offset = Vector2( 1000, 100 )

[node name="BackgroundMap" type="TileMap" parent="."]
tile_set = ExtResource( 1 )
cell_size = Vector2( 16, 16 )
format = 1

[node name="WorldMap" type="TileMap" parent="."]
tile_set = ExtResource( 8 )
cell_size = Vector2( 16, 16 )
format = 1
tile_data = PoolIntArray( 1310715, 8, 0, 1310716, 8, 0, 1310717, 8, 0, 1310718, 8, 0, 1310719, 8, 0, 1245184, 8, 0, 1245185, 8, 0, 1245186, 8, 0, 1245187, 8, 0, 1245188, 8, 0, 1245189, 8, 0, 1245190, 8, 0, 1245191, 8, 0, 1245192, 8, 0, 1245193, 8, 0, 1245194, 8, 0, 1245195, 8, 0, 1245196, 8, 0, 1245197, 8, 0, 1245198, 8, 0, 1245199, 8, 0, 1245200, 8, 0, 1245201, 8, 0, 1245202, 8, 0, 1245203, 8, 0, 1245204, 8, 0, 1245205, 8, 0, 1245206, 8, 0, 1245207, 8, 30, 1245208, 8, 7, 1245209, 8, 3, 1245210, 8, 0, 1245211, 8, 30, 1245212, 8, 7, 1245213, 8, 0, 1245214, 8, 3, 1245215, 8, 5, 1245216, 8, 3, 1245217, 8, 0, 1245218, 8, 3, 1245219, 8, 4, 1245220, 8, 21, 1245221, 8, 30, 1245222, 8, 7, 1245223, 8, 0, 1245224, 8, 3, 1245225, 8, 0, 1245226, 8, 30, 1245227, 8, 30, 1245228, 8, 7, 1245229, 8, 1, 1245230, 8, 5, 1245231, 8, 14, 1245232, 8, 11, 1245233, 8, 30, 1245234, 8, 3, 1245235, 8, 5, 1245236, 8, 30, 1245237, 8, 3, 1245238, 8, 0, 1245239, 8, 7, 1245240, 8, 7, 1245241, 8, 5, 1245242, 8, 7, 1245243, 8, 0, 1245244, 8, 30, 1245245, 8, 30, 1245246, 8, 30, 1245247, 8, 0, 1245248, 8, 3, 1245249, 8, 21, 1245250, 8, 3, 1245251, 8, 0, 1245252, 8, 3, 1245253, 8, 3 )

[node name="Objects" type="Node2D" parent="."]

[node name="Cactus" parent="Objects" instance=ExtResource( 9 )]
position = Vector2( 1106, 258 )

[node name="MapGenerator" type="Area2D" parent="Objects"]
position = Vector2( 548, 224 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Objects/MapGenerator"]
position = Vector2( -371, -147 )
shape = SubResource( 16 )

[node name="DeathTrigger" parent="Objects" instance=ExtResource( 2 )]
position = Vector2( 512, 592 )
scale = Vector2( 512, 1 )

[node name="Coin" parent="Objects" instance=ExtResource( 3 )]
position = Vector2( 1396, 263 )

[node name="Coin2" parent="Objects" instance=ExtResource( 3 )]
position = Vector2( 2372, 135 )

[node name="Player" parent="." instance=ExtResource( 4 )]
visible = false
position = Vector2( 92, 242 )
scale = Vector2( 1, 1 )
speed = 0
jump_height = 120.0
jump_time_to_peak = 0.25
jump_time_to_descent = 0.25

[node name="UI" type="CanvasLayer" parent="."]

[node name="CoinCounter" parent="UI" instance=ExtResource( 5 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 56.0
margin_top = 16.0
margin_right = 135.0
margin_bottom = 49.0

[node name="Transition" parent="UI" instance=ExtResource( 10 )]
visible = false
start_closed = true

[node name="Burger2" parent="." instance=ExtResource( 14 )]
position = Vector2( 2139, 136 )

[node name="Burger" parent="." instance=ExtResource( 14 )]
position = Vector2( 1616, 264 )

[node name="GasGasGas" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
volume_db = -18.0
autoplay = true

[node name="Dino" type="Area2D" parent="."]
position = Vector2( 82, 255 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="Dino"]
frames = SubResource( 22 )
frame = 3
playing = true

[node name="Sprite" type="Sprite" parent="Dino"]
visible = false
material = SubResource( 24 )
texture = ExtResource( 13 )

[node name="StartPixelExplosion" type="Timer" parent="Dino"]
wait_time = 2.0
one_shot = true
autostart = true

[node name="ApplyPixelExplosion" type="Timer" parent="Dino"]
wait_time = 0.01

[connection signal="body_entered" from="Objects/MapGenerator" to="." method="_on_MapGenerator_body_entered"]
[connection signal="finished" from="GasGasGas" to="." method="_on_GasGasGas_finished"]
[connection signal="timeout" from="Dino/StartPixelExplosion" to="." method="_on_StartPixelExplosion_timeout"]
[connection signal="timeout" from="Dino/ApplyPixelExplosion" to="." method="_on_ApplyPixelExplosion_timeout"]
